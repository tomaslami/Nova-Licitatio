// SPDX-License-Identifier: MIT

pragma solidity ^0.8.17;

contract Proyecto {

struct Licitacion {
uint ProcessNum;
string ProcessName;
string Ubi;
uint SuggAmount;
uint Time;
    }
event NewLicit (address licit_Id, uint processNum, uint suggAmount, string ubi, string processName, uint time);

Licitacion[] public licitaciones;
mapping(uint => address) public Gob_Licit;

function SetLicit(uint _ProcessNum, uint _SuggAmount, uint _Time, string memory _Ubi, string memory _ProcessName) public{
    licitaciones.push(Licitacion(_ProcessNum, _ProcessName, _Ubi, _SuggAmount, _Time));
    uint id = licitaciones.length;
    Gob_Licit[id] = msg.sender;
    emit NewLicit(msg.sender, _ProcessNum, _SuggAmount, _Ubi, _ProcessName, _Time);
    }

modifier onlyComp (uint _LicitId){
    require(msg.sender == Gob_Licit[_LicitId]);
    _;
}


function ViewLicit () public view returns (Licitacion[] memory){
    return licitaciones;
}



}


(CONEXION PARTE BACK)

const Web3 = require('web3');

var ContractAbi = [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "nombre_",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "apellido_",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "curso_",
				"type": "string"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "apellido",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "materia",
				"type": "string"
			}
		],
		"name": "aprobo",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "curso",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "nombre_completo",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "materia",
				"type": "string"
			}
		],
		"name": "nota_materia",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "promedio",
		"outputs": [
			{
				"internalType": "uint256",
				"name": "",
				"type": "uint256"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "materia",
				"type": "string"
			},
			{
				"internalType": "uint256",
				"name": "nota",
				"type": "uint256"
			}
		],
		"name": "set_nota_materia",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	}
]

var ContratAddress = "0x5d64CDbA37582683351D9348737caB29Dbc5dE4e";          
var conexion = new web3js.eth.Contract(ContractAbi, "0x5d64CDbA37582683351D9348737caB29Dbc5dE4e");

const rpcURL = "https://goerli.infura.io/v3/"
const web3 = new Web3(rpcURL)
